const fs = require('fs');
const _ = require('lodash');
const acorn = require('acorn');
const walk = require('acorn-walk');

module.exports = {
  parseBundle
};

function parseBundle(bundlePath) {
  const content = fs.readFileSync(bundlePath, 'utf8');
  const ast = acorn.parse(content, {
    sourceType: 'script',
    ecmaVersion: 2050
  });

  const walkState = {
    locations: null
  };

  walk.recursive(
    ast,
    walkState,
    {
      AssignmentExpression(node, state) {
        if (state.locations) return;

        const {left, right} = node;

        if (
          left &&
          left.object && left.object.name === 'exports' &&
          left.property && left.property.name === 'modules' &&
          isModulesHash(right)
        ) {
          state.locations = getModulesLocations(right);
        }
      },
      CallExpression(node, state, c) {
        if (state.locations) return;

        const args = node.arguments;

        if (
          node.callee.type === 'FunctionExpression' &&
          !node.callee.id &&
          args.length === 1 &&
          isSimpleModulesList(args[0])
        ) {
          state.locations = getModulesLocations(args[0]);
          return;
        }

        if (
          node.callee.type === 'Identifier' &&
          mayBeAsyncChunkArguments(args) &&
          isModulesList(args[1])
        ) {
          state.locations = getModulesLocations(args[1]);
          return;
        }

        if (isAsyncChunkPushExpression(node)) {
          state.locations = getModulesLocations(args[0].elements[1]);
          return;
        }

        if (isAsyncWebWorkerChunkExpression(node)) {
          state.locations = getModulesLocations(args[1]);
          return;
        }


        _.each(args, arg => c(arg, state));
      }
    }
  );

  let modules;

  if (walkState.locations) {
    modules = _.mapValues(walkState.locations,
      loc => content.slice(loc.start, loc.end)
    );
  } else {
    modules = {};
  }

  return {
    src: content,
    modules
  };
}

function isModulesList(node) {
  return (
    isSimpleModulesList(node) ||
    isOptimizedModulesArray(node)
  );
}

function isSimpleModulesList(node) {
  return (
    isModulesHash(node) ||
    isModulesArray(node)
  );
}

function isModulesHash(node) {
  return (
    node.type === 'ObjectExpression' &&
    _(node.properties)
      .map('value')
      .every(isModuleWrapper)
  );
}

function isModulesArray(node) {
  return (
    node.type === 'ArrayExpression' &&
    _.every(node.elements, elem =>
      !elem ||
      isModuleWrapper(elem)
    )
  );
}

function isOptimizedModulesArray(node) {
  return (
    node.type === 'CallExpression' &&
    node.callee.type === 'MemberExpression' &&
    node.callee.object.type === 'CallExpression' &&
    node.callee.object.callee.type === 'Identifier' &&
    node.callee.object.callee.name === 'Array' &&
    node.callee.object.arguments.length === 1 &&
    isNumericId(node.callee.object.arguments[0]) &&
    node.callee.property.type === 'Identifier' &&
    node.callee.property.name === 'concat' &&
    node.arguments.length === 1 &&
    isModulesArray(node.arguments[0])
  );
}

function isModuleWrapper(node) {
  return (
    ((node.type === 'FunctionExpression' || node.type === 'ArrowFunctionExpression') && !node.id) ||
    isModuleId(node) ||
    (node.type === 'ArrayExpression' && node.elements.length > 1 && isModuleId(node.elements[0]))
  );
}

function isModuleId(node) {
  return (node.type === 'Literal' && (isNumericId(node) || typeof node.value === 'string'));
}

function isNumericId(node) {
  return (node.type === 'Literal' && Number.isInteger(node.value) && node.value >= 0);
}

function isChunkIds(node) {
  return (
    node.type === 'ArrayExpression' &&
    _.every(node.elements, isModuleId)
  );
}

function isAsyncChunkPushExpression(node) {
  const {
    callee,
    arguments: args
  } = node;

  return (
    callee.type === 'MemberExpression' &&
    callee.property.name === 'push' &&
    callee.object.type === 'AssignmentExpression' &&
    args.length === 1 &&
    args[0].type === 'ArrayExpression' &&
    mayBeAsyncChunkArguments(args[0].elements) &&
    isModulesList(args[0].elements[1])
  );
}

function mayBeAsyncChunkArguments(args) {
  return (
    args.length >= 2 &&
    isChunkIds(args[0])
  );
}

function isAsyncWebWorkerChunkExpression(node) {
  const {callee, type, arguments: args} = node;

  return (
    type === 'CallExpression' &&
    callee.type === 'MemberExpression' &&
    args.length === 2 &&
    isChunkIds(args[0]) &&
    isModulesList(args[1])
  );
}

function getModulesLocations(node) {
  if (node.type === 'ObjectExpression') {
    const modulesNodes = node.properties;

    return _.transform(modulesNodes, (result, moduleNode) => {
      const moduleId = moduleNode.key.name || moduleNode.key.value;

      result[moduleId] = getModuleLocation(moduleNode.value);
    }, {});
  }

  const isOptimizedArray = (node.type === 'CallExpression');

  if (node.type === 'ArrayExpression' || isOptimizedArray) {
    const minId = isOptimizedArray ?
      node.callee.object.arguments[0].value :
      0;
    const modulesNodes = isOptimizedArray ?
      node.arguments[0].elements :
      node.elements;

    return _.transform(modulesNodes, (result, moduleNode, i) => {
      if (!moduleNode) return;
      result[i + minId] = getModuleLocation(moduleNode);
    }, {});
  }

  return {};
}

function getModuleLocation(node) {
  return {
    start: node.start,
    end: node.end
  };
}
